import React, { useState } from 'react';\nimport { CreditCard, Building2, Wallet, Shield } from 'lucide-react';\n\nconst PaymentForm = ({ \n  amount,\n  currency = 'â‚±',\n  onPayment,\n  loading = false,\n  merchantFee = 2.5\n}) => {\n  const [selectedPaymentMethod, setSelectedPaymentMethod] = useState('credit-card');\n  const [cardDetails, setCardDetails] = useState({\n    cardNumber: '',\n    cardholderName: '',\n    expiryMonth: '',\n    expiryYear: '',\n    cvc: ''\n  });\n\n  const handleInputChange = (field, value) => {\n    setCardDetails(prev => ({\n      ...prev,\n      [field]: value\n    }));\n  };\n\n  const formatCardNumber = (value) => {\n    const v = value.replace(/\\s+/g, '').replace(/[^0-9]/gi, '');\n    const matches = v.match(/\\d{4,16}/g);\n    const match = matches && matches[0] || '';\n    const parts = [];\n    for (let i = 0, len = match.length; i < len; i += 4) {\n      parts.push(match.substring(i, i + 4));\n    }\n    if (parts.length) {\n      return parts.join(' ');\n    } else {\n      return v;\n    }\n  };\n\n  const handleCardNumberChange = (e) => {\n    const formatted = formatCardNumber(e.target.value);\n    handleInputChange('cardNumber', formatted);\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    onPayment?.({\n      paymentMethod: selectedPaymentMethod,\n      cardDetails,\n      amount\n    });\n  };\n\n  const calculateTotal = () => {\n    if (selectedPaymentMethod === 'credit-card') {\n      return amount + (amount * merchantFee / 100);\n    }\n    return amount;\n  };\n\n  const paymentMethods = [\n    {\n      id: 'deposit',\n      name: 'Deposit',\n      description: 'Pay by your via Card',\n      icon: Building2,\n      color: 'visa-teal'\n    },\n    {\n      id: 'credit-card',\n      name: 'Credit Card',\n      description: 'Visa, Mastercard, Amex',\n      icon: CreditCard,\n      color: 'visa-orange',\n      fee: `Merchant Fee ${merchantFee}%`\n    },\n    {\n      id: 'wallet',\n      name: 'Digital Wallet',\n      description: 'GCash, PayMaya, GrabPay',\n      icon: Wallet,\n      color: 'visa-teal'\n    }\n  ];\n\n  return (\n    <div className=\"payment-form-container\">\n      {/* Payment Method Selection */}\n      <div className=\"payment-methods-section\">\n        <h3 className=\"payment-section-title\">Select Payment Method</h3>\n        <div className=\"payment-methods-grid\">\n          {paymentMethods.map((method) => {\n            const IconComponent = method.icon;\n            const isSelected = selectedPaymentMethod === method.id;\n            \n            return (\n              <div\n                key={method.id}\n                className={`payment-method-card ${\n                  isSelected ? `payment-method-selected-${method.color}` : 'payment-method-default'\n                }`}\n                onClick={() => setSelectedPaymentMethod(method.id)}\n              >\n                <div className=\"flex items-center space-x-3\">\n                  <IconComponent className={`w-6 h-6 ${\n                    isSelected ? `text-${method.color}-500` : 'text-gray-600'\n                  }`} />\n                  <div className=\"flex-1\">\n                    <div className={`font-semibold ${\n                      isSelected ? `text-${method.color}-500` : 'text-gray-900'\n                    }`}>\n                      {method.name}\n                    </div>\n                    <div className=\"text-sm text-gray-600\">\n                      {method.description}\n                    </div>\n                    {method.fee && (\n                      <div className=\"text-xs text-gray-500 mt-1\">\n                        {method.fee}\n                      </div>\n                    )}\n                  </div>\n                </div>\n              </div>\n            );\n          })}\n        </div>\n      </div>\n\n      {/* Credit Card Form */}\n      {selectedPaymentMethod === 'credit-card' && (\n        <div className=\"payment-details-section\">\n          <h3 className=\"payment-section-title\">Credit Card Details</h3>\n          <form onSubmit={handleSubmit} className=\"payment-form\">\n            <div className=\"form-group\">\n              <label className=\"form-label\">Card Number</label>\n              <input\n                type=\"text\"\n                placeholder=\"1234 5678 9012 3456\"\n                className=\"input-field\"\n                value={cardDetails.cardNumber}\n                onChange={handleCardNumberChange}\n                maxLength={19}\n                required\n              />\n            </div>\n\n            <div className=\"form-group\">\n              <label className=\"form-label\">Cardholder Name</label>\n              <input\n                type=\"text\"\n                placeholder=\"Juan Dela Cruz\"\n                className=\"input-field\"\n                value={cardDetails.cardholderName}\n                onChange={(e) => handleInputChange('cardholderName', e.target.value)}\n                required\n              />\n            </div>\n\n            <div className=\"grid grid-cols-3 gap-4\">\n              <div className=\"form-group\">\n                <label className=\"form-label\">Expiry Month</label>\n                <select \n                  className=\"input-field\"\n                  value={cardDetails.expiryMonth}\n                  onChange={(e) => handleInputChange('expiryMonth', e.target.value)}\n                  required\n                >\n                  <option value=\"\">MM</option>\n                  {Array.from({length: 12}, (_, i) => i + 1).map(month => (\n                    <option key={month} value={month.toString().padStart(2, '0')}>\n                      {month.toString().padStart(2, '0')}\n                    </option>\n                  ))}\n                </select>\n              </div>\n              <div className=\"form-group\">\n                <label className=\"form-label\">Expiry Year</label>\n                <select \n                  className=\"input-field\"\n                  value={cardDetails.expiryYear}\n                  onChange={(e) => handleInputChange('expiryYear', e.target.value)}\n                  required\n                >\n                  <option value=\"\">YY</option>\n                  {Array.from({length: 20}, (_, i) => new Date().getFullYear() + i).map(year => (\n                    <option key={year} value={year.toString().slice(-2)}>\n                      {year.toString().slice(-2)}\n                    </option>\n                  ))}\n                </select>\n              </div>\n              <div className=\"form-group\">\n                <label className=\"form-label\">CVC</label>\n                <input\n                  type=\"text\"\n                  placeholder=\"123\"\n                  className=\"input-field\"\n                  value={cardDetails.cvc}\n                  onChange={(e) => handleInputChange('cvc', e.target.value.replace(/\\D/g, ''))}\n                  maxLength={4}\n                  required\n                />\n              </div>\n            </div>\n          </form>\n        </div>\n      )}\n\n      {/* Payment Summary */}\n      <div className=\"payment-summary\">\n        <div className=\"payment-total-section\">\n          <div className=\"flex justify-between items-center mb-4\">\n            <span className=\"text-lg font-semibold text-gray-900\">Subtotal</span>\n            <span className=\"text-lg font-semibold\">{currency}{amount.toLocaleString()}</span>\n          </div>\n          \n          {selectedPaymentMethod === 'credit-card' && (\n            <div className=\"flex justify-between items-center mb-4 text-sm text-gray-600\">\n              <span>Processing Fee ({merchantFee}%)</span>\n              <span>{currency}{(amount * merchantFee / 100).toLocaleString()}</span>\n            </div>\n          )}\n          \n          <div className=\"border-t pt-4\">\n            <div className=\"flex justify-between items-center mb-6\">\n              <span className=\"text-xl font-bold text-gray-900\">Total Amount To Be Paid</span>\n              <span className=\"visa-price\">{currency}{calculateTotal().toLocaleString()}</span>\n            </div>\n          </div>\n        </div>\n\n        <button \n          type=\"submit\"\n          onClick={handleSubmit}\n          disabled={loading}\n          className=\"payment-button\"\n        >\n          {loading ? (\n            <div className=\"flex items-center justify-center space-x-2\">\n              <div className=\"spinner-orange\"></div>\n              <span>Processing...</span>\n            </div>\n          ) : (\n            <div className=\"flex items-center justify-center space-x-2\">\n              {selectedPaymentMethod === 'credit-card' ? (\n                <CreditCard className=\"w-5 h-5\" />\n              ) : selectedPaymentMethod === 'wallet' ? (\n                <Wallet className=\"w-5 h-5\" />\n              ) : (\n                <Shield className=\"w-5 h-5\" />\n              )}\n              <span>PAY</span>\n            </div>\n          )}\n        </button>\n\n        <div className=\"payment-security-notice\">\n          By clicking PAY, you will be connected to the payment gateway\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default PaymentForm;"