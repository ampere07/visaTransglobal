import React, { useState, useEffect, useRef } from 'react'\nimport { ChevronLeft, ChevronRight, Calendar } from 'lucide-react'\n\nconst DatePicker = ({\n  label,\n  name,\n  value,\n  onChange,\n  onBlur,\n  onFocus,\n  error,\n  required = false,\n  register = null,\n  watch = null,\n  className = '',\n  min,\n  max,\n  ...props\n}) => {\n  const [isOpen, setIsOpen] = useState(false)\n  const [isFocused, setIsFocused] = useState(false)\n  const [currentMonth, setCurrentMonth] = useState(new Date())\n  const [selectedDate, setSelectedDate] = useState(value ? new Date(value) : null)\n  const containerRef = useRef(null)\n  const inputRef = useRef(null)\n\n  // Get current value from either controlled value prop or react-hook-form watch\n  const currentValue = watch ? watch(name) : value\n  const hasValue = currentValue && currentValue.trim() !== ''\n\n  useEffect(() => {\n    if (currentValue) {\n      setSelectedDate(new Date(currentValue))\n      setCurrentMonth(new Date(currentValue))\n    }\n  }, [currentValue])\n\n  // Handle clicks outside to close calendar\n  useEffect(() => {\n    const handleClickOutside = (event) => {\n      if (containerRef.current && !containerRef.current.contains(event.target)) {\n        setIsOpen(false)\n        setIsFocused(false)\n        if (onBlur) onBlur(event)\n      }\n    }\n\n    document.addEventListener('mousedown', handleClickOutside)\n    return () => document.removeEventListener('mousedown', handleClickOutside)\n  }, [onBlur])\n\n  const handleInputFocus = (e) => {\n    setIsFocused(true)\n    setIsOpen(true)\n    if (onFocus) onFocus(e)\n  }\n\n  const handleInputBlur = (e) => {\n    // Don't blur immediately to allow calendar interaction\n    setTimeout(() => {\n      if (!containerRef.current?.contains(document.activeElement)) {\n        setIsFocused(false)\n        setIsOpen(false)\n        if (onBlur) onBlur(e)\n      }\n    }, 150)\n  }\n\n  const handleDateSelect = (date) => {\n    const dateString = date.toISOString().split('T')[0]\n    setSelectedDate(date)\n    setIsOpen(false)\n    setIsFocused(false)\n    \n    // Create synthetic event for react-hook-form and regular onChange\n    const syntheticEvent = {\n      target: {\n        name,\n        value: dateString,\n        type: 'date'\n      }\n    }\n    \n    if (onChange) onChange(syntheticEvent)\n    \n    // Focus back to input\n    if (inputRef.current) {\n      inputRef.current.focus()\n    }\n  }\n\n  const formatDisplayDate = (date) => {\n    if (!date) return ''\n    return date.toLocaleDateString('en-US', {\n      weekday: 'short',\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric'\n    })\n  }\n\n  const getDaysInMonth = (date) => {\n    const year = date.getFullYear()\n    const month = date.getMonth()\n    const firstDay = new Date(year, month, 1)\n    const lastDay = new Date(year, month + 1, 0)\n    const startingDayOfWeek = firstDay.getDay()\n    const daysInMonth = lastDay.getDate()\n    \n    const days = []\n    \n    // Add empty cells for days before the first day of the month\n    for (let i = 0; i < startingDayOfWeek; i++) {\n      days.push(null)\n    }\n    \n    // Add days of the month\n    for (let day = 1; day <= daysInMonth; day++) {\n      days.push(new Date(year, month, day))\n    }\n    \n    return days\n  }\n\n  const navigateMonth = (direction) => {\n    setCurrentMonth(prev => {\n      const newMonth = new Date(prev)\n      newMonth.setMonth(prev.getMonth() + direction)\n      return newMonth\n    })\n  }\n\n  const isDateDisabled = (date) => {\n    if (!date) return false\n    const dateString = date.toISOString().split('T')[0]\n    if (min && dateString < min) return true\n    if (max && dateString > max) return true\n    return false\n  }\n\n  const isToday = (date) => {\n    if (!date) return false\n    const today = new Date()\n    return date.toDateString() === today.toDateString()\n  }\n\n  const isSelected = (date) => {\n    if (!date || !selectedDate) return false\n    return date.toDateString() === selectedDate.toDateString()\n  }\n\n  const isLabelActive = isFocused || hasValue\n\n  // For react-hook-form integration\n  const inputProps = register ? register(name, { \n    required: required ? `${label} is required` : false\n  }) : {\n    name,\n    value: currentValue || '',\n    onChange: handleDateSelect\n  }\n\n  const days = getDaysInMonth(currentMonth)\n  const monthYear = currentMonth.toLocaleDateString('en-US', {\n    month: 'long',\n    year: 'numeric'\n  })\n\n  return (\n    <div className={`input-group ${className}`} ref={containerRef}>\n      {/* Hidden input for form submission */}\n      <input\n        type=\"hidden\"\n        {...inputProps}\n        value={currentValue || ''}\n      />\n      \n      {/* Display input */}\n      <div\n        ref={inputRef}\n        tabIndex={0}\n        onClick={handleInputFocus}\n        onFocus={handleInputFocus}\n        onBlur={handleInputBlur}\n        className={`input-floating ${hasValue || isFocused ? 'has-value' : ''} cursor-pointer flex items-center justify-between`}\n        {...props}\n      >\n        <span className={hasValue ? 'text-gray-900' : 'text-transparent'}>\n          {hasValue ? formatDisplayDate(selectedDate) : 'Select date'}\n        </span>\n        <Calendar className=\"w-5 h-5 text-gray-400\" />\n      </div>\n      \n      {/* Floating Label */}\n      <label className={`label-floating ${isLabelActive ? 'active' : ''} ${isFocused ? 'focused' : ''}`}>\n        {label} {required && '*'}\n      </label>\n      \n      {/* Calendar Popup */}\n      {isOpen && (\n        <div className=\"absolute top-full left-0 mt-2 bg-white border border-gray-200 rounded-lg shadow-xl z-50 p-4 w-80 animate-slide-up\">\n          {/* Month Navigation */}\n          <div className=\"flex items-center justify-between mb-4\">\n            <button\n              type=\"button\"\n              onClick={() => navigateMonth(-1)}\n              className=\"p-2 hover:bg-gray-100 rounded-lg transition-colors duration-200\"\n            >\n              <ChevronLeft className=\"w-5 h-5 text-gray-600\" />\n            </button>\n            <h3 className=\"text-lg font-semibold text-gray-900\">{monthYear}</h3>\n            <button\n              type=\"button\"\n              onClick={() => navigateMonth(1)}\n              className=\"p-2 hover:bg-gray-100 rounded-lg transition-colors duration-200\"\n            >\n              <ChevronRight className=\"w-5 h-5 text-gray-600\" />\n            </button>\n          </div>\n          \n          {/* Days of Week Header */}\n          <div className=\"grid grid-cols-7 gap-1 mb-2\">\n            {['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'].map(day => (\n              <div key={day} className=\"text-center text-sm font-medium text-gray-500 py-2\">\n                {day}\n              </div>\n            ))}\n          </div>\n          \n          {/* Calendar Days */}\n          <div className=\"grid grid-cols-7 gap-1\">\n            {days.map((date, index) => {\n              if (!date) {\n                return <div key={index} className=\"p-2\" />\n              }\n              \n              const disabled = isDateDisabled(date)\n              const today = isToday(date)\n              const selected = isSelected(date)\n              \n              return (\n                <button\n                  key={index}\n                  type=\"button\"\n                  onClick={() => !disabled && handleDateSelect(date)}\n                  disabled={disabled}\n                  className={`\n                    p-2 text-sm rounded-lg transition-all duration-200 hover:bg-gray-100\n                    ${selected ? 'bg-primary-500 text-white hover:bg-primary-600' : ''}\n                    ${today && !selected ? 'bg-primary-100 text-primary-700 font-semibold' : ''}\n                    ${disabled ? 'text-gray-300 cursor-not-allowed hover:bg-transparent' : 'cursor-pointer'}\n                    ${!selected && !today && !disabled ? 'text-gray-700 hover:bg-gray-100' : ''}\n                  `}\n                >\n                  {date.getDate()}\n                </button>\n              )\n            })}\n          </div>\n          \n          {/* Quick Actions */}\n          <div className=\"flex justify-between items-center mt-4 pt-4 border-t border-gray-200\">\n            <button\n              type=\"button\"\n              onClick={() => handleDateSelect(new Date())}\n              className=\"text-sm text-primary-600 hover:text-primary-700 font-medium\"\n            >\n              Today\n            </button>\n            <button\n              type=\"button\"\n              onClick={() => setIsOpen(false)}\n              className=\"text-sm text-gray-500 hover:text-gray-700\"\n            >\n              Close\n            </button>\n          </div>\n        </div>\n      )}\n      \n      {/* Error Message */}\n      {error && (\n        <p className=\"text-red-500 text-sm mt-1\">{error}</p>\n      )}\n    </div>\n  )\n}\n\nexport default DatePicker\n